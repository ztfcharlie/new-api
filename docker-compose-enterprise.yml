version: '3.4'

services:
  burncloud-enterprise-aiapi:
    image: calciumion/new-api:latest
    container_name: burncloud-enterprise-aiapi
    restart: always
    command: --log-dir /app/logs
    ports:
      - "3003:3000"
    volumes:
      - ./data:/data
      - ./logs:/app/logs
    environment:
      - SQL_DSN=root:burncloud123456!qwf@tcp(burncloud-enterprise-mysql:3306)/new-api?parseTime=true
      - REDIS_CONN_STRING=redis://burncloud-enterprise-redis
      - GLOBAL_API_RATE_LIMIT_ENABLE=false
      - GLOBAL_API_RATE_LIMIT=300
      - GLOBAL_API_RATE_LIMIT_DURATION=60
      - GLOBAL_WEB_RATE_LIMIT_ENABLE=false
      - GLOBAL_WEB_RATE_LIMIT=300
      - GLOBAL_WEB_RATE_LIMIT_DURATION=60      
      - ERROR_LOG_ENABLED=true # 是否启用错误日志记录
      - GENERATE_DEFAULT_TOKEN=true
    #      - STREAMING_TIMEOUT=120  # 流模式无响应超时时间，单位秒，默认120秒，如果出现空补全可以尝试改为更大值
    #      - SESSION_SECRET=random_string  # 多机部署时设置，必须修改这个随机字符串！！！！！！！
    #      - NODE_TYPE=slave  # Uncomment for slave node in multi-node deployment
    #      - SYNC_FREQUENCY=60  # Uncomment if regular database syncing is needed
    #      - FRONTEND_BASE_URL=https://openai.justsong.cn  # Uncomment for multi-node deployment with front-end URL

    depends_on:
      - burncloud-enterprise-redis
      - burncloud-enterprise-mysql
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O - http://localhost:3000/api/status | grep -o '\"success\":\\s*true' | awk -F: '{print $$2}'"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - nginx-network

  burncloud-enterprise-redis:
    image: redis:latest
    container_name: burncloud-enterprise-redis
    restart: always
    networks:
      - nginx-network 

  burncloud-enterprise-mysql:
    image: mysql:8.2
    container_name: burncloud-enterprise-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: burncloud123456!qwf # Ensure this matches the password in SQL_DSN
      MYSQL_DATABASE: new-api
    volumes:
      - ./mysql_data:/var/lib/mysql
    # ports:
    #   - "3306:3306"  # If you want to access MySQL from outside Docker, uncomment
    networks:
      - nginx-network 

networks:
  nginx-network:
    external: true